// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
// model User {
//   id            String    @id @default(cuid())
//   username      String?   @unique
//   email         String?   @unique
//   password      String?
//   emailVerified DateTime?
//   image         String?
//   createdAt     DateTime @default(now())
//   updatedAt     DateTime @updatedAt
// }




model Account {
  id                 String    @id @default(cuid())
  userId             String       
  type               String    
  provider           String   
  providerAccountId  String   
  refresh_token      String?   @db.Text
  access_token       String?   @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?   @db.Text
  session_state      String?    

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}

model Session {
  id           String     @id @default(cuid())
  sessionToken String     @unique
  userId       String
  expires      DateTime
  user         User       @relation(fields: [userId], references: [id], onDelete:Cascade)
}


enum UserRole {
  ADMIN
  USER
}

model User {
  id            String    @unique @id @default(cuid())
  username      String?   @unique
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  name          String?
  email         String    @unique
  emailVerified DateTime?
  active        Boolean   @default(false)
  image         String?   @default("https://github.com/shadcn.png")
  ActivateToken ActivateToken[]
  accounts      Account[]
  sessions      Session[]
  DonPosts      DonPost[]
  role          UserRole  @default(USER)
  resetToken       String?     // New field for password reset token
  resetTokenExpiry DateTime?   // New field for token expiry
  // posts         Post[]
  ReqPost       ReqPost[]
}

// model Category {
//   id    String  @id @default(cuid()) @map("_id")
//   slug  String  @unique
//   title String
//   img   String?
// }

// model Post {
//   id        String    @id @default(cuid()) @map("_id")
//   createdAt DateTime  @default(now())
//   title     String
//   desc      String
//   img       String
//   phone           String
//   isWhatsapp      Boolean          @default(false)
//   views     Int       @default(0)
//   userEmail String
//   user      User      @relation(fields: [userEmail], references: [email])
// }



model MedCategory {
  id        String    @id @default(cuid())
  title     String   @unique
  DonPosts  DonPost[]
  ReqPost   ReqPost[]
}

model LocationCategory {
  id        String    @id @default(cuid())
  title     String    @unique
  DonPosts  DonPost[]
  ReqPost   ReqPost[]  
}

// model PostType {
//   id        String    @id @default(cuid())
//   title     String    @unique
//   DonPosts  DonPost[]
// }

enum PostType {
  DONATION
  REQUEST
}


model DonPost {
  id        String    @id @default(cuid()) @map("_id")
  createdAt DateTime  @default(now())
  title     String
  desc      String
  // img       String 
  img       String?   @default("https://www.medisave.co.uk/cdn/shop/collections/Tom.jpg?v=1683730716")
  phone           String
  isWhatsapp      Boolean          @default(false) 
  views     Int       @default(0)
  userEmail String
  location String
  category String
  MedCategory  MedCategory  @relation(fields: [category], references: [title])
  user      User      @relation(fields: [userEmail], references: [email])
  cat       LocationCategory  @relation(fields: [location], references: [title])
  type          PostType  @default(DONATION) 
}

model ReqPost {
  id        String    @id @default(cuid()) @map("_id")
  createdAt DateTime  @default(now())
  title     String
  desc      String
  img       String
  phone           String
  isWhatsapp      Boolean          @default(false)
  views     Int       @default(0)
  userEmail String
  location String
  category String
  MedCategory  MedCategory  @relation(fields: [category], references: [title])
  user      User      @relation(fields: [userEmail], references: [email])
  cat       LocationCategory  @relation(fields: [location], references: [title])
  type          PostType   @default(REQUEST) 
}


// model DonatePost{
//   id              String           @id @default(cuid())
//   slug            String           @unique
//   title           String
//   createdAt       DateTime         @default(now())
//   description     String
//   userEmail       String
//   user            User             @relation(fields: [userEmail], references: [email])
// }

model ActivateToken{
  id            String    @id @default(cuid())
  token         String    @unique
  activatedAt   DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  user          User       @relation(fields: [userId], references: [id])
  userId        String
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}




