// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
// model User {
//   id            String    @id @default(cuid())
//   username      String?   @unique
//   email         String?   @unique
//   password      String?
//   emailVerified DateTime?
//   image         String?
//   createdAt     DateTime @default(now())
//   updatedAt     DateTime @updatedAt
// }




model Account {
  id                 String    @id @default(cuid())
  userId             String       
  type               String    
  provider           String   
  providerAccountId  String   
  refresh_token      String?   @db.Text
  access_token       String?   @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?   @db.Text
  session_state      String?    

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}

model Session {
  id           String     @id @default(cuid())
  sessionToken String     @unique
  userId       String
  expires      DateTime
  user         User       @relation(fields: [userId], references: [id], onDelete:Cascade)
}

model User {
  id            String    @id @default(cuid())
  username      String?   @unique
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  name          String?
  email         String    @unique
  emailVerified DateTime?
  active        Boolean   @default(false)
  image         String?
  ActivateToken ActivateToken[]
  accounts      Account[]
  sessions      Session[]
  DonPosts      DonPost[]
  // DonatePosts   DonatePost[]
}


model MedCategory {
  id        String    @id @default(cuid())
  slug      String    @unique
  title     String
  DonPosts  DonPost[]
}

model LocationCategory {
  id        String    @id @default(cuid())
  slug      String    @unique
  title     String
  DonPosts  DonPost[]  
}


model DonPost {
  id              String           @id @default(cuid())
  slug            String           @unique
  title           String
  createdAt       DateTime         @default(now())
  description     String
  images          String[]
  phone           String
  isWhatsapp      Boolean          @default(false)
  userEmail       String
  user            User             @relation(fields: [userEmail], references: [email])
  views           Int              @default(0)
  catSlug         String
  locationSlug    String
  cat             MedCategory      @relation(fields: [catSlug], references: [slug])
  locCat          LocationCategory @relation(fields: [locationSlug], references: [slug])
}


// model DonatePost{
//   id              String           @id @default(cuid())
//   slug            String           @unique
//   title           String
//   createdAt       DateTime         @default(now())
//   description     String
//   userEmail       String
//   user            User             @relation(fields: [userEmail], references: [email])
// }

model ActivateToken{
  id            String    @id @default(cuid())
  token         String    @unique
  activatedAt   DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  user          User       @relation(fields: [userId], references: [id])
  userId        String
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}




